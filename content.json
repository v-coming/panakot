{"pages":[{"title":"about","text":"","link":"/about/index.html"},{"title":"catalogue","text":"","link":"/catalogue/index.html"},{"title":"tags","text":"","link":"/tags/index.html"}],"posts":[{"title":"02_install_hexo/02_install_hexo","text":"Hexo的安装1. 安装前准备&emsp;&emsp;在安装Hexo前，首先要把承载Hexo的两个平台先安装好，分别是： Node.js (Node.js 版本需不低于 8.10，建议使用 Node.js 10.0 及以上版本) Git &emsp;如果您的电脑中已经安装上述必备程序，那么恭喜您！你可以直接前往 安装 Hexo 步骤。如果没有，可以参考以下安装指导完成安装。 2. 安装Git Windows：下载并安装 Git。 Mac：使用 Homebrew, MacPorts 或者下载安装程序。 Linux (Ubuntu, Debian)：sudo apt-get install git-core。 Linux (Fedora, Red Hat, CentOS)：sudo yum install git-core。 Warning由于墙的问题，我们访问上面的资源，有几个问题：1）加载慢； 2）打不开； 3）下载速度小。这里给个建议——使用代理，不推荐使用，因为考虑安全性的问题。也可以使用这个网站适用于Linux安装；Windows安装可以下载GitHub【waylau/git-for-win】收录了存储于百度云的下载地址,对于中国大陆地区用户，可以前往淘宝 Git for Windows镜像 下载Git安装包。 >Take a moment >如果你是 CentOS 服务器上的，可以直接使用[HexoOneClickInstallation](https://github.com/PasserByJia/HexoOneClickInstallation)这个脚本快速安装 Hexo。 ### 3. 安装Node.js &emsp;&emsp;Node.js 为大多数平台提供了官方的[安装程序](https://nodejs.org/en/download/)。对于中国大陆地区用户，可以前往[淘宝Node.js镜像](https://npm.taobao.org/mirrors/node)下载。 &emsp;其它的安装方法： Windows：通过nvs（推荐）或者nvm安装。 Mac：使用Homebrew或MacPorts安装。 Linux（DEB/RPM-based）：从NodeSource安装。 其它：使用相应的软件包管理器进行安装，可以参考由 Node.js 提供的指导。 &emsp;对于 Mac 和 Linux 同样建议使用 nvs 或者 nvm，以避免可能会出现的权限问题。&emsp;安装Node.js的最佳方式 &emsp;&emsp;cURL: $ curl https://raw.github.com/creationix/nvm/v0.33.11/install.sh | sh&emsp;&emsp;Wget: $ wget -qO- https://raw.github.com/creationix/nvm/v0.33.11/install.sh | sh &emsp;&emsp;安装完成后，重启终端并执行下列命令即可安装 Node.js。 $ nvm install stable 4. Hexo安装&emsp;&emsp;所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。 $ npm install -g hexo-cli 5. 验证软件是否安装成功&emsp;&emsp;1) 检查Git &emsp;&emsp;2) 检查Node.js &emsp;&emsp;3) 检查Hexo","link":"/2020/03/16/02_install_hexo/02_install_hexo/"},{"title":"01_grasp_hexo/01_grasp_hexo","text":"什么是Hexo?&emsp;Hexo是一个快速、简洁且高效的博客框架。能够让你从小白向大师迈进，不再需要掌握很多关于前端开发的知识，不用每天撸代码，修改BUG。通过hexo，可以快速构建个人博客，并搭建到GitHub、Coding、云服务器、码云上供他人访问，实现资源共享。 Hexo的特点1. 轻量快速&emsp;Hexo的轻量快速得益于Hexo使用Node.js编写，也归功于Node.js单线程、非阻塞I/O、事件机制，事件环的特点。 &emsp;&emsp;&emsp;详细Node.js知识点，请参考Node.js教程 。 2. 支持Markdown&emsp;&emsp;Hexo使用Markdown(或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。 3. 部署方便&emsp;&emsp;只需要通过基于Node.js和git平台，使用hexo相关命令就可以完成博客的搭建，文章的创建、生成以及部署到承载平台，如GitHub Pages、Coding Pages、Heroku、云服务器等其他承载网站平台。 4. 插件丰富、主题丰富&emsp;&emsp;Hexo有许多主题和插件供想要搭建个人博客者提供有选择性挑选自己如意的、称心的博客主题和插件。 5.免费&emsp;&emsp;Hexo的主题和插件都是免费向大众开放的。 学习Hexo之前，需要准备哪些： Node.js基本知识 Git基本知识 Html语言学习 CSS JavaScript基本知识 Markdown语法使用&emsp;&emsp;想要搭建属于自己的个人博客，还是需要付出一点时间、一点精力去学习有关博客搭建的知识，Markdown还是需要学习的，这关乎于你个人博客文章的排版，如果你不在意，那就不用掌握。","link":"/2020/03/16/01_grasp_hexo/01_grasp_hexo/"},{"title":"03_conf_hexo/03_conf_hexo","text":"配置Hexo ## 建立网站 &emsp;安装好 Hexo 后即可建立你的网站。这里整理两种方式： &emsp;&emsp;① 在某盘符新建一个文件夹，命名定义自己喜欢的、方便的。然后鼠标双击进入文件夹，通过鼠标右键，点击\" Git Base Here \"，打开当前路径。使用如下命令： hexo init //hexo会在当前路径的文件夹中创建所需的文件 &emsp;&emsp;图1： &emsp;&emsp;图2：&emsp;&emsp;②随便在Windwons的任何文件夹点击鼠标右键，通过” Git Base Here “中来创建hexo所需的文件。使用命令如下： mkdir /j/Blog/www.panakot.cn &amp;&amp; cd /j/Blog/www.panakot.cn //在J盘的Blog文件下创建www.panakot.cn文件夹并进入到该文件夹 hexo init //hexo会在当前路径的文件夹中创建所需的文件 &emsp;&emsp;图3： &emsp;新建完成后，指定文件夹的目录如下： . ├── themes ├── package.json ├── scaffolds ├── source | ├── _drafts | └── _posts └──_config.yml&emsp;&emsp;图4： &emsp;重点解析该类文件夹及文件的功能和作用： &emsp;&emsp;themes &emsp;&emsp;主题文件夹。Hexo 会根据主题来生成静态页面。默认会生成一个landscape的主题文件夹，你也可以去Hexo官网下载自己如意的Hexo主题，然后将下载好的主题放在该目录下，稍后再介绍如何修改主题。&emsp;&emsp;scaffolds &emsp;&emsp; 模版文件夹。新建文章时，Hexo会根据scaffold来建立文件。&emsp;&emsp; Hexo的模板是指在新建的文章文件中默认填充的内容。例如，如果您修改scaffold/post.md中的Front-matter内容，那么每次新建一篇文章时都会包含这个修改。 &emsp;&emsp;source &emsp;&emsp;这个目录相当重要，当您通过hexo new xxx新建的文章时，所有新建的markdown文件都是在保存在这个目录下的_posts文件下。当前_posts文件夹下默认有一篇hello-world.md的markdown文件。您的文章就是在整个文件中编写的，当您通过hexo g 生成静态文件时，_posts文件下的.md文件，会被编译成html文件，然后放到public（目前该public文件夹不存在，因为我们还没有编译过）文件夹下。 &emsp;&emsp;_drafts用来存放草稿文件。 &emsp;&emsp;package.json &emsp;&emsp;Hexo框架所依赖的应用程序的信息及参数。EJS, Stylus 和 Markdown renderer 已默认安装，您可以自由移除。 package.json { &quot;name&quot;: &quot;hexo-site&quot;, &quot;version&quot;: &quot;0.0.0&quot;, &quot;private&quot;: true, &quot;hexo&quot;: { &quot;version&quot;: &quot;&quot; }, &quot;dependencies&quot;: { &quot;hexo&quot;: &quot;^3.8.0&quot;, &quot;hexo-generator-archive&quot;: &quot;^0.1.5&quot;, &quot;hexo-generator-category&quot;: &quot;^0.1.3&quot;, &quot;hexo-generator-index&quot;: &quot;^0.2.1&quot;, &quot;hexo-generator-tag&quot;: &quot;^0.2.0&quot;, &quot;hexo-renderer-ejs&quot;: &quot;^0.3.1&quot;, &quot;hexo-renderer-stylus&quot;: &quot;^0.3.3&quot;, &quot;hexo-renderer-marked&quot;: &quot;^0.3.2&quot;, &quot;hexo-server&quot;: &quot;^0.3.3&quot; } }&emsp;&emsp;_config.yml&emsp;&emsp; 全局配置文件，网站的很多信息都在这里配置，诸如网站名称，副标题，描述，作者，语言，主题，部署等等参数。这个文件下面会做较为详细的介绍。 # Hexo Configuration ## Docs: https://hexo.io/docs/configuration.html ## Source: https://github.com/hexojs/hexo/ # Site //站点配置 title: Hexo //网站标题 subtitle: &apos;&apos; //网站副标题 description: &apos;&apos; //网站描述 keywords: //网站的关键词。使用半角逗号 , 分隔多个关键词。 author: John Doe //站长（作者） language: en //网站使用的语言 timezone: &apos;&apos; //网站时区。Hexo 默认使用您电脑的时区。请参考 时区列表 进行设置，如 America/New_York, Japan, 和 UTC 。一般的，对于中国大陆地区可以使用 Asia/Shanghai。 # URL //站点连接配置 ## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos; url: http://yoursite.com //您站点的URL（域名） root: / //网站根目录 permalink: :year/:month/:day/:title/ //文章的永久链接格式，默认格式:year/:month/:day/:title/ permalink_defaults: //永久链接中各部分的默认值 pretty_urls: //改写 permalink 的值来美化 URL trailing_index: true //是否在永久链接中保留尾部的 index.html，设置为 false 时去除;默认true trailing_html: true //是否在永久链接中保留尾部的 .html, 设置为 false 时去除 (对尾部的 index.html无效) # Directory //目录设置 source_dir: source //资源文件夹，这个文件夹用来存放内容。默认值：source。 public_dir: public //公共文件夹，这个文件夹用于存放生成的站点文件。默认值：public tag_dir: tags //标签文件夹，默认值：tags archive_dir: archives //归档文件夹，默认值：archives category_dir: categories //分类文件夹，默认值：categories code_dir: downloads/code //Include code 文件夹，source_dir下的子目录，默认值：downloads/code i18n_dir: :lang //国际化（i18n），默认值：文件夹:lang skip_render: //跳过指定文件的渲染。匹配到的文件将会被不做改动地复制到 public 目录中。您可使用 glob 表达式来匹配路径。 # Writing //文章编写设置 new_post_name: :title.md //新文章的文件名称,默认值： default_layout: post //预设布局，默认值： titlecase: false //把标题转换为 title case external_link: //在新标签中打开链接 enable: true //在新标签中打开链接 field: site //对整个网站（site）生效或仅对文章（post）生效 exclude: &apos;&apos; //需要排除的域名。主域名和子域名如 www 需分别配置 filename_case: 0 //把文件名称转换为 (1) 小写或 (2) 大写 render_drafts: false //显示草稿 post_asset_folder: false //启动 Asset 文件夹 relative_link: false //把链接改为与根目录的相对位址 future: true //显示未来的文章 highlight: //代码块的设置 enable: true //开启代码块高亮 line_number: true //显示行数 auto_detect: false //如果未指定语言，则启用自动检测 tab_replace: &apos;&apos; //用 n 个空格替换 tabs；如果值为空，则不会替换 tabs wrap: true //Wrap the code block in &lt;table&gt; hljs: false //Use the hljs-* prefix for CSS classes # Home page setting //首页设置，可以自己决定每页显示的文章数量和显示文章的顺序 # path: Root path for your blogs index page. (default = &apos;&apos;) # per_page: Posts displayed per page. (0 = disable pagination) # order_by: Posts order. (Order by date descending by default) index_generator: //主页设置 path: &apos;&apos; //首页根目录 per_page: 10 //每页显示文章的数量，默认为10. order_by: -date //显示文章的顺序，默认为-date,按时间逆序 # Category &amp; Tag //标签与分类 default_category: uncategorized //默认分类，默认值uncategorized category_map: //分类别名 tag_map: //标签别名 # Metadata elements ## https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta meta_generator: true # Date / Time format //时间和日期显示格式，一般没有特殊要求不需要修改 ## Hexo uses Moment.js to parse and display date ## You can customize the date format as defined in ## http://momentjs.com/docs/#/displaying/format/ date_format: YYYY-MM-DD //日期格式，默认为YYYY-MM-DD time_format: HH:mm:ss //时间格式，默认为HH:mm:ss ## Use post&apos;s date for updated date unless set in front-matter use_date_for_updated: false //启用以后，如果 Front Matter 中没有指定 updated， post.updated 将会使用 date 的值而不是文件的创建时间。在 Git 工作流中这个选项会很有用 # Pagination //分页设置 ## Set per_page to 0 to disable pagination per_page: 10 //每页显示的文章量 (0 = 关闭分页功能) pagination_dir: page //分页目录，默认为page # Include / Exclude file(s) //在配置文件中，设置include / exclude以使hexo显示处理或忽略某些文件/文件夹。 ## include:/exclude: options only apply to the &apos;source/&apos; folder include: //Hexo 默认会忽略隐藏文件和文件夹（包括名称以下划线和 . 开头的文件和文件夹，Hexo 的 _posts 和 _data 等目录除外）。通过设置此字段将使 Hexo 处理他们并将它们复制到 source 目录下。 exclude: //设置 Hexo 忽略的文件列表 ignore: //Ignore files/folders # Extensions //扩展，这里可以设置主题类型和插件 ## Plugins: https://hexo.io/plugins/ ## Themes: https://hexo.io/themes/ theme: landscape //当前主题名称。值为false时禁用主题 # Deployment //关于网站部署的配置，常用的有部署类型和部署地址 ## Docs: https://hexo.io/docs/deployment.html deploy: //部署的设置 type: &apos;&apos; //网站部署的类型","link":"/2020/03/16/03_conf_hexo/03_conf_hexo/"},{"title":"04_deploy_hexo/04_deploy_hexo","text":"部署HEXO一、 部署到GitHub1. 准备工作&emsp;&emsp;1）如果目前有意搭建自己的个人博客，而此前没有GitHub账号，点击此处前往GitHub官网注册一个GitHub账号。账号注册流程就不在此处展示操作了，请自行注册。 &emsp;&emsp;2）注册完成后，新建一个公开仓库，仓库名称格式为your_username.github.id。例如我的GitHub的仓库名为panakot,那么生成的仓库地址名称就是panakot.github.io。 &emsp;&emsp;3）创建完成后，建议用记事本记录仓库的HTTPS/SSH地址，后期设置_config.yml会用上。该仓库的HTTPS的一般格式为https://github.com/your_username/your_reponame.github.io.git;SSH的一般格式为git@github.com:your_username/your_reponame.github.io.git。 2. 安装部署插件$ npm install hexo-deployer-git --save $ npm install hexo-server --save 3. 配置Git&emsp;&emsp;如果你只是安装好了 Git 但没有配置过你的 Git ，那么现在需要做的第一件事情就是设置你的 Git 用户名和邮箱。 在 Git Bash 中执行以下两条命令配置你的用户名和邮箱，这里建议用户名和邮箱与你的 GitHub 用户名和邮箱保持一致。 $ git config --global user.name &quot;Your_user_name&quot; $ git config --global user.email Your_email@example.com 提醒每次 Git 提交时都会附带这两条信息，用于记录是谁提交的更新，并且会随更新内容一起被记录到历史记录中。简单说，是用来标记的你的身份的 每次 Git 提交时都会附带这两条信息，用于记录是谁提交的更新，并且会随更新内容一起被记录到历史记录中。简单说，是用来标记的你的身份的 4. 配置站点_config.yml文件&emsp;&emsp;用记事本或Sublime Text3、Visual Studio Code打开，拉到文末，找到deploy：。这里就会用到我建议使用记事本记录仓库的SSH地址，需要修改的配置参考如下： deploy: type: git # 类型填git repo: &lt;repository url&gt; # 你的Github仓库地址 branch: master # 分支名称。默认填写 master 如果您使用的是 GitHub ，程序会尝试自动检测。 message: # 提交信息可以自定义，不填的则默认为提交时间 5.SSH连接GitHub&emsp;&emsp;SSH是Secure Shell（安全外壳）的简称，是一种在不安全的网络环境中，通过加密机制和认证机制，实现安全的远程访问以及文件传输等业务的网络安全协议。SSH协议采用了典型的客户端/服务器模式，并基于TCP协议协商建立用于保护数据传输的会话通道。SSH协议有两个版本，SSH1.x和SSH2.0（本文简称SSH1和SSH2），两者互不兼容。SSH2在性能和安全性方面比SSH1有所提高。 &emsp;&emsp;使用 SSH 协议可以连接远程服务器和服务并向它们验证。 利用 SSH 密钥可以连接 GitHub，而无需在每次访问时提供用户名或密码。 &emsp;&emsp;1）检查现有SSH密钥 &emsp;&emsp;在生成 SSH 密钥之前，您可以检查是否有任何现有的 SSH 密钥。 &emsp;&emsp;Windows/Mac/Linux查询方式： &emsp;&emsp;① Windows打开Git Base Here,Mac/Linux打开Terminal（终端）。 &emsp;&emsp;② 输入ls -al ~/.ssh以查看是否存在现有SSH密钥： $ ls -al ~/.ssh # 列出 .ssh 目录中的文件（如果有）&emsp;&emsp;③ 检查目录列表以查看是否已经有SSH公钥。默认情况下，公钥的文件名是以下之一： ★ id_rsa.pub ★ id_ecdsa.pub ★ id_ed25519.pub &emsp;&emsp;如果您没有现有的公钥和私钥对，或者不希望使用任何可用于连接到GitHub的密钥对，那么请生成一个新的SSH密钥。 &emsp;&emsp;如果您看到要用于连接到GitHub的列出的现有公钥和私钥对（例如id_rsa.pub和id_rsa），则可以将SSH密钥添加到ssh-agent。 &emsp;&emsp;2）生成新SSH密钥 &emsp;&emsp;① Windows打开Git Base Here,Mac/Linux打开Terminal（终端）。 &emsp;&emsp;② 粘贴下面的文本（替换为您的 GitHub 电子邮件地址）。 $ ssh-keygen -t rsa -b 4096 -C &quot;your_email@example.com&quot; &emsp;&emsp;这将创建以所提供的电子邮件地址为标签的新 SSH 密钥。 &gt; Generating public/private rsa key pair. &emsp;&emsp;③ 提示您“Enter a file in which to save the key（输入要保存密钥的文件）”时，按 Enter 键。 这将接受默认文件位置。 &gt; Enter a file in which to save the key (/c/Users/you/.ssh/id_rsa):[Press enter] &emsp;&emsp;④ 在提示时输入安全密码。 这样可以更安全的保护自己的密钥。 &gt; Enter passphrase (empty for no passphrase): [Type a passphrase] &gt; Enter same passphrase again: [Type passphrase again] &emsp;&emsp;3）将SSH密钥添加到GitHub账户 &emsp;&emsp;① 找到/.ssh目录下的id_rsa.pub，将SSH公钥钥复制到剪贴板。或通过Git Base Here使用 cd ~/.ssh 进入.ssh目录，然后使用 ll 查询当前文件夹下的文件，然后使用 clip &lt; ~/.ssh/id_rsa.pub 复制/.ssh/id_rsa.pub文件中的公钥信息。 &emsp;&emsp;② 登录GitHub，在页面的右上角，单击您的个人资料照片，然后单击 Settings（设置）。 &emsp;&emsp;在用户设置侧边栏中，单击 SSH and GPG keys（SSH 和 GPG 密钥）。 &emsp;&emsp;单击 New SSH key（新 SSH 密钥）或 Add SSH key（添加 SSH 密钥）。 &emsp;&emsp;在 “Title”（标题）字段中，为新密钥添加描述性标签。将密钥粘贴到 “Key”（密钥）字段。最后单击 Add SSH key（添加 SSH 密钥）。 &emsp;&emsp;如有提示，请确认您的 GitHub 密码。 &emsp;&emsp;4）测试SSH连接 &emsp;&emsp;以上操作完成后，测试连接时，您将需要使用密码（即您之前创建的 SSH 密钥密码）验证此操作。 &emsp;&emsp; 打开Git Base Here，输入以下内容： $ ssh -T git@github.com //对GitHub尝试ssh &emsp;&emsp;您可能会看到类似如下的警告： &gt; The authenticity of host &apos;github.com (IP ADDRESS)&apos; can&apos;t be established. &gt; RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48. &gt; Are you sure you want to continue connecting (yes/no)?&emsp;&emsp;或类似如下： &gt; The authenticity of host &apos;github.com (IP ADDRESS)&apos; can&apos;t be established. &gt; RSA key fingerprint is SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8. &gt; Are you sure you want to continue connecting (yes/no)? &emsp;&emsp;验证您看到的消息中的指纹匹配步骤 2 中的消息之一，然后输入 yes： &gt; Hi username! You&apos;ve successfully authenticated, but GitHub does not provide shell access. 6. 发布到GitHub&emsp;&emsp;在本地的 Hexo 站点根目录下，执行如下命令即可部署到 GitHub Pages 上。 $ hexo clean &amp;&amp; hexo d -g 提醒如果是第一次使用，会弹出一个登录框，需要登录你的 GitHub 账号。 7. 配置个性化域名和域名解析&emsp;&emsp;1) 如果你拥有个人域名，请用 A 记录解析到以下 IP 中的任意一个。如果使用 CNAME 请解析到你的 GitHub 仓库名称。 185.199.108.153 185.199.109.153 185.199.110.153 185.199.111.153 &emsp;&emsp; 以上地址是通过域名解析你的仓库地址your_username.github.io得到的IP地址；用于解析您上传到GitHub网站的GitHub Pages。 &emsp;&emsp;云服务器（阿里云、腾讯云、百度云等）设置域名解析参考如下表格。 记录类型 主机记录 解析路线 记录值 Max优先级 TTL（秒） A @ 默认 185.199.111.153 - 600 CNAME @ 默认 GitHub仓库地址（如我的：panakot.github.io) - 600 &emsp;&emsp;2) 打开仓库，点击设置，找到GitHub Pages项目，修改Custom domain选项的值为您自定义的域名（注意此处不需要填写http/https://等前缀）。 &emsp;&emsp;3）勾选Custom domain选项下的Enforce HTTPS选项，强制开启https。如果遇到Enforce HTTPS选项无法打开，可以稍等一会再尝试。 提醒同时需要在本地的 source 目录新建一个 CNAME 文件，内容为你的自定义域名（不用带http | https://等前缀）。否则无法使用自定义域名功能（ hexo d 生成的文件没有 CNAME 文件，导致仓库的自定域名设置失效）。 &emsp;&emsp;如果出现以下错误提示，请参照上面的提醒操作，在本地source目录新建一个CNAME的文件，注意没有任何后缀格式，然后用记事本打开，输入您的个性化域名，如www.baihu.com或baihu.com。最后使用`hexo d`重新将本地的博客文件上传到GitHub Pages。 &emsp;&emsp;到这里，您的网站就部署完成了，后期就可以开始写文章、修改主题、优化网站等操作了。下面的文章将如何教会您完成上面的操作。让我们继续学习吧。","link":"/2020/03/16/04_deploy_hexo/04_deploy_hexo/"}],"tags":[],"categories":[]}